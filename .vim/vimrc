set nocompatible
let mapleader=','
let maplocalleader='\'
nnoremap ,, ,
nnoremap q: :q
nnoremap q<Tab> q:

set vi=<0,'0,/16,f1,h history=100
set bs=2 ts=2 sw=2 expandtab
set lazyredraw modeline modelines=3
set nowrap noshowmode nohlsearch nobackup nowritebackup
set ignorecase smartcase autoindent
set foldmethod=marker foldnestmax=3 foldminlines=3
set wildmode=longest,list
set bo=all
set mouse=v
set dir=~/.vim/swap,.,~/tmp,~/

set number scl=number
set shortmess+=c
set ttimeoutlen=50 updatetime=800

" --- COC ---

fun! s:check_back_space() abort
    let col = col('.') - 1
    return !col || getline('.')[col - 1]  =~# '\s'
endfun

fun! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  elseif (coc#rpc#ready())
    call CocActionAsync('doHover')
  else
    execute '!' . &keywordprg . " " . expand('<cword>')
  endif
endfun

inoremap <silent><expr> <TAB>
       \ pumvisible() ? "\<C-n>" :
       \ <SID>check_back_space() ? "\<TAB>" :
       \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

nnoremap <silent> K :call <SID>show_documentation()<CR>
nmap <silent> [e <Plug>(coc-diagnostic-prev)
nmap <silent> ]e <Plug>(coc-diagnostic-next)
nmap <silent> <Leader>jd <Plug>(coc-definition)
nmap <silent> <Leader>jt <Plug>(coc-type-definition)
nmap <silent> <Leader>ji <Plug>(coc-implementation)
nmap <silent> <Leader>jr <Plug>(coc-references)

" --- Mappings ---

fun! s:wipe_buffers()
  let l:tablist = []
  for i in range(tabpagenr('$'))
    call extend(l:tablist, tabpagebuflist(i + 1))
  endfor

  let l:count = 0
  for i in range(1, bufnr('$'))
    " bufno exists AND isn't modified AND isn't in the list of buffers open in windows and tabs
    if bufexists(i) && !getbufvar(i,"&mod") && index(l:tablist, i) == -1
      silent exec 'bwipeout' i
      let l:count = l:count + 1
    endif
  endfor
  echomsg l:count . ' buffer(s) wiped out.'
endfun

command! -nargs=? -complete=dir SDirvish split | silent Dirvish <args>

nnoremap <silent><Leader>s :sp %:h<CR>
nnoremap <silent><Leader>S :sp .<CR>
nnoremap <silent><Leader>e :e %:h<CR>
nnoremap <silent><Leader>E :e .<CR>
nnoremap <silent><Leader>~ :Dirvish ~<CR>
nnoremap <silent><Leader>b :Buffers<CR>
nnoremap <silent><Leader>f :Files<CR>
nnoremap <silent><Leader>g :GFiles?<CR>
nnoremap <silent><Leader>G :GFiles<CR>
nnoremap <Leader>/ :BLines<Space>
nnoremap <Leader>? :Lines<Space>
nnoremap <Leader>n :set invnumber<CR>
nnoremap <Leader>v :set invpaste<CR>
nnoremap <Leader>m :set invwrap invlinebreak<CR>
nnoremap <Leader>H :set invhlsearch<CR>
nnoremap <silent><Leader>( :RainbowToggle<CR>
nnoremap <silent><C-W>S :exe "res ".line('$')<CR>gg''
nnoremap <silent>du :diffupdate<CR>
nnoremap <silent>dP :.diffput<CR>
nnoremap <silent><Leader>d :CocFzfList diagnostics --current-buf<CR>
nnoremap <silent><Leader>D :CocFzfList diagnostics<CR>
nnoremap <silent><Leader>o :CocFzfList outline<CR>

if !exists('s:lasttab')
  " See augroup vimrc below.
  let s:lasttab = 1
endif

fun! s:rotate_tab()
  exe "tabn " . s:lasttab
endfun

nnoremap <silent><Leader>i :-tabnew<CR>
nnoremap <silent><Leader>a :tabnew<CR>
nnoremap <silent><Leader>I :0tabnew<CR>
nnoremap <silent><Leader>A :$tabnew<CR>
" The following two are the same thing, but whatever.
nnoremap <silent><Leader>0 :tabfirst<CR>
nnoremap <silent><Leader>1 :tabn 1<CR>
nnoremap <silent><Leader>2 :tabn 2<CR>
nnoremap <silent><Leader>3 :tabn 3<CR>
nnoremap <silent><Leader>4 :tabn 4<CR>
nnoremap <silent><Leader>$ :tablast<CR>
nnoremap <Leader>h gT
nnoremap <Leader>l gt
nnoremap <silent><Leader><Tab> :call <SID>rotate_tab()<CR>
nnoremap <silent><Leader>W :call <SID>wipe_buffers()<CR>
nnoremap <Leader>r :Rg<Space>
nnoremap <Leader>c :tcd<Space>
nnoremap <Leader>C :tcd ../
nnoremap <silent><Leader>p :echo "Current path:" getcwd()<CR>

nmap SS <Plug>YSsurround
nmap Ss <Plug>YSsurround
nmap ss <Plug>Yssurround
nmap S <Plug>YSurround
nmap s <Plug>Ysurround

nnoremap <Up> <C-W>+
nnoremap <Down> <C-W>-
nnoremap <Left> <C-W><
nnoremap <Right> <C-W>>
nnoremap <C-W>" :term<CR>
nnoremap <C-W>% :vert rightb term<CR>
tnoremap <C-B>" <C-W>:term<CR>
tnoremap <C-B>% <C-W>:vert rightb term<CR>

vnoremap <Leader>: :normal<Space>

" --- Looks ---

let &t_SI = "\e[5 q"
let &t_EI = "\e[2 q" 
let &t_SR = "\e[4 q"
let &t_ER = "\e[2 q"
syn on

set ruler ls=2 bg=dark
set fillchars=vert:â”‚,fold:\  " That's an escaped space.

" --- Autocmd ---

fun! s:resized()
  if &co > 200
    unlet g:fzf_preview_window
  else
    let g:fzf_preview_window=['up:40%', 'ctrl-/']
  endif
endfun
call s:resized()

augroup vimrc
  autocmd!
  au BufNewFile,BufRead * set fo-=o
  au TabClosed,TabLeave * let s:lasttab = tabpagenr()
  au VimResized * call s:resized()
augroup END

" --- Config ---

if filereadable(expand("~/.vimrc.local"))
  source ~/.vimrc.local
endif

let g:rainbow_active = 0
let g:rainbow_conf = {
      \ 'ctermfgs': [9, 208, 11, 10, 14, 12, 13],
      \ 'separately': {
      \   'elixir': {
      \     'parentheses_options': 'containedin=elixirMap' }}}

if empty($VIM_COLORSCHEME)
  colorscheme almost_ansi
else
  execute 'colorscheme ' . $VIM_COLORSCHEME
endif

runtime scripts/statusline.vim
